#jinja2: trim_blocks: True, lstrip_blocks: True
# {{ ansible_managed }}
# ------------------------------
# mailcow web ui configuration
# ------------------------------
# example.org is _not_ a valid hostname, use a fqdn here.
# Default admin user is "admin"
# Default password is "moohoo"

MAILCOW_HOSTNAME={{ mailcow_config.hostname }}

# Password hash algorithm
# Only certain password hash algorithm are supported. For a fully list of supported schemes,
# see https://docs.mailcow.email/models/model-passwd/
MAILCOW_PASS_SCHEME={{ mailcow_config.password_scheme }}

# ------------------------------
# SQL database configuration
# ------------------------------

DBNAME={{ mailcow_database.schema_name }}
DBUSER={{ mailcow_database.username }}

# Please use long, random alphanumeric strings (A-Za-z0-9)

DBPASS={{ mailcow_database.password }}
DBROOT={{ mailcow_database.root_password }}

# ------------------------------
# REDIS configuration
# ------------------------------

REDISPASS={{ mailcow_redis.password }}

# ------------------------------
# HTTP/S Bindings
# ------------------------------

# You should use HTTPS, but in case of SSL offloaded reverse proxies:
# Might be important: This will also change the binding within the container.
# If you use a proxy within Docker, point it to the ports you set below.
# Do _not_ use IP:PORT in HTTP(S)_BIND or HTTP(S)_PORT
# IMPORTANT: Do not use port 8081, 9081 or 65510!
# Example: HTTP_BIND=1.2.3.4
# For IPv4 leave it as it is: HTTP_BIND= & HTTPS_PORT=
# For IPv6 see https://docs.mailcow.email/post_installation/firststeps-ip_bindings/
HTTP_PORT={{ mailcow_bindings.get("http", {"address":"","port":"80"}).get("port", "80") }}
HTTP_BIND={{ mailcow_bindings.get("http", {"address":"","port":"80"}).get("address", "") }}

HTTPS_PORT={{ mailcow_bindings.get("https", {"address":"","port":"443"}).get("port", "443") }}
HTTPS_BIND={{ mailcow_bindings.get("https", {"address":"","port":"443"}).get("address", "") }}

# ------------------------------
# Other bindings
# ------------------------------
# You should leave that alone
# Format: 11.22.33.44:25 or 12.34.56.78:465 etc.
SMTP_PORT={{ mailcow_bindings.get("smtp", {"address":"","port":"25"}) | bodsch.email.mailcow_ports() }}
SMTPS_PORT={{ mailcow_bindings.get("smtps", {"address":"","port":"465"}) | bodsch.email.mailcow_ports() }}
SUBMISSION_PORT={{ mailcow_bindings.get("submission", {"address":"","port":"587"}) | bodsch.email.mailcow_ports() }}
IMAP_PORT={{ mailcow_bindings.get("imap", {"address":"","port":"143"}) | bodsch.email.mailcow_ports() }}
IMAPS_PORT={{ mailcow_bindings.get("imaps", {"address":"","port":"993"}) | bodsch.email.mailcow_ports() }}
POP_PORT={{ mailcow_bindings.get("pop", {"address":"","port":"110"}) | bodsch.email.mailcow_ports() }}
POPS_PORT={{ mailcow_bindings.get("pops", {"address":"","port":"995"}) | bodsch.email.mailcow_ports() }}
SIEVE_PORT={{ mailcow_bindings.get("sieve", {"address":"","port":"4190"}) | bodsch.email.mailcow_ports() }}
DOVEADM_PORT={{ mailcow_bindings.get("doveadm", {"address":"127.0.0.1","port":"19991"}) | bodsch.email.mailcow_ports() }}
SQL_PORT={{ mailcow_bindings.get("database", {"address":"127.0.0.1","port":"13306"}) | bodsch.email.mailcow_ports() }}
REDIS_PORT={{ mailcow_bindings.get("redis", {"address":"127.0.0.1","port":"7654"}) | bodsch.email.mailcow_ports() }}

# Your timezone
# See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones for a list of timezones
# Use the column named 'TZ identifier' + pay attention for the column named 'Notes'
TZ={{ mailcow_config.timezone }}

# Fixed project name
# Please use lowercase letters only
COMPOSE_PROJECT_NAME={{ mailcow_config.compose.project_name }}

# Used Docker Compose version
# Switch here between native (compose plugin) and standalone
# For more informations take a look at the mailcow docs regarding the configuration options.
# Normally this should be untouched but if you decided to use either of those you can switch it manually here.
# Please be aware that at least one of those variants should be installed on your machine or mailcow will fail.
{% set _compose_version = 'native' %}
{% if mailcow_config.compose.command == 'docker-compose' %}
  {% set _compose_version = 'standalone' %}
{% endif %}
DOCKER_COMPOSE_VERSION={{ _compose_version }}

# Set this to "allow" to enable the anyone pseudo user. Disabled by default.
# When enabled, ACL can be created, that apply to "All authenticated users"
# This should probably only be activated on mail hosts, that are used exclusivly by one organisation.
# Otherwise a user might share data with too many other users.
ACL_ANYONE=disallow

# Garbage collector cleanup
# Deleted domains and mailboxes are moved to /var/vmail/_garbage/timestamp_sanitizedstring
# How long should objects remain in the garbage until they are being deleted? (value in minutes)
# Check interval is hourly

MAILDIR_GC_TIME={{ mailcow_maildir.gc_time }}

# Additional SAN for the certificate
#
# You can use wildcard records to create specific names for every domain you add to mailcow.
# Example: Add domains "example.com" and "example.net" to mailcow, change ADDITIONAL_SAN to a value like:
#ADDITIONAL_SAN=imap.*,smtp.*
# This will expand the certificate to "imap.example.com", "smtp.example.com", "imap.example.net", "smtp.example.net"
# plus every domain you add in the future.
#
# You can also just add static names...
#ADDITIONAL_SAN=srv1.example.net
# ...or combine wildcard and static names:
#ADDITIONAL_SAN=imap.*,srv1.example.com
#
ADDITIONAL_SAN={{ mailcow_san.additional_sans | default([]) | join(',') }}

# Obtain certificates for autodiscover.* and autoconfig.* domains.
# This can be useful to switch off in case you are in a scenario where a reverse proxy already handles those.
# There are mixed scenarios where ports 80,443 are occupied and you do not want to share certs
# between services. So acme-mailcow obtains for maildomains and all web-things get handled
# in the reverse proxy.
AUTODISCOVER_SAN={{ mailcow_san.autodiscover | default('false') | bodsch.core.config_bool(true_as='y', false_as='n') }}

# Additional server names for mailcow UI
#
# Specify alternative addresses for the mailcow UI to respond to
# This is useful when you set mail.* as ADDITIONAL_SAN and want to make sure mail.maildomain.com will always point to the mailcow UI.
# If the server name does not match a known site, Nginx decides by best-guess and may redirect users to the wrong web root.
# You can understand this as server_name directive in Nginx.
# Comma separated list without spaces! Example: ADDITIONAL_SERVER_NAMES=a.b.c,d.e.f
ADDITIONAL_SERVER_NAMES={{ mailcow_additional_server_names | join(',') }}

# Skip running ACME (acme-mailcow, Let's Encrypt certs) - y/n
SKIP_LETS_ENCRYPT={{ mailcow_lets_encrypt.enabled | bodsch.core.config_bool(true_as='n', false_as='y') }}

# Create seperate certificates for all domains - y/n
# this will allow adding more than 100 domains, but some email clients will not be able to connect with alternative hostnames
# see https://doc.dovecot.org/admin_manual/ssl/sni_support
ENABLE_SSL_SNI={{ mailcow_sni.enabled | bodsch.core.config_bool(true_as='y', false_as='n') }}

# Skip IPv4 check in ACME container - y/n
SKIP_IP_CHECK={{ mailcow_ip_check.enabled | bodsch.core.config_bool(true_as='n', false_as='y') }}

# Skip HTTP verification in ACME container - y/n
SKIP_HTTP_VERIFICATION={{ mailcow_http_verification.enabled | bodsch.core.config_bool(true_as='n', false_as='y') }}

# Skip Unbound (DNS Resolver) Healthchecks (NOT Recommended!) - y/n
SKIP_UNBOUND_HEALTHCHECK={{ mailcow_unbound_healthcheck.enabled | bodsch.core.config_bool(true_as='n', false_as='y') }}

# Skip ClamAV (clamd-mailcow) anti-virus (Rspamd will auto-detect a missing ClamAV container) - y/n
SKIP_CLAMD={{ mailcow_clamd.enabled | bodsch.core.config_bool(true_as='n', false_as='y') }}

# Skip SOGo: Will disable SOGo integration and therefore webmail, DAV protocols and ActiveSync support (experimental, unsupported, not fully implemented) - y/n
SKIP_SOGO={{ mailcow_sogo.enabled | bodsch.core.config_bool(true_as='n', false_as='y') }}

# Skip FTS (Fulltext Search) for Dovecot on low-memory, low-threaded systems or if you simply want to disable it.
# Dovecot inside mailcow use Flatcurve as FTS Backend.
SKIP_FTS={{ mailcow_fts.enabled | bodsch.core.config_bool(true_as='n', false_as='y') }}

# Dovecot Indexing (FTS) Process maximum heap size in MB, there is no recommendation, please see Dovecot docs.
# Flatcurve (Xapian backend) is used as the FTS Indexer. It is supposed to be efficient in CPU and RAM consumption.
# However: Please always monitor your Resource consumption!
FTS_HEAP={{ mailcow_fts.heap_memory }}

# Controls how many processes the Dovecot indexing process can spawn at max.
# Too many indexing processes can use a lot of CPU and Disk I/O.
# Please visit: https://doc.dovecot.org/configuration_manual/service_configuration/#indexer-worker for more informations
FTS_PROCS={{ mailcow_fts.procs }}

# Allow admins to log into SOGo as email user (without any password)
ALLOW_ADMIN_EMAIL_LOGIN=n

# Enable watchdog (watchdog-mailcow) to restart unhealthy containers
USE_WATCHDOG={{ mailcow_watchdog.enabled | bodsch.core.config_bool(true_as='y', false_as='n') }}
# Send watchdog notifications by mail (sent from watchdog@MAILCOW_HOSTNAME)
# CAUTION:
# 1. You should use external recipients
# 2. Mails are sent unsigned (no DKIM)
# 3. If you use DMARC, create a separate DMARC policy ("v=DMARC1; p=none;" in _dmarc.MAILCOW_HOSTNAME)
# Multiple rcpts allowed, NO quotation marks, NO spaces
{% if mailcow_watchdog.notify.emails is defined and
      mailcow_watchdog.notify.emails | count > 0 %}
WATCHDOG_NOTIFY_EMAIL={{ mailcow_watchdog.notify.emails | join(',') }}
{% else %}
#WATCHDOG_NOTIFY_EMAIL=a@example.com,b@example.com,c@example.com
{% endif %}
{% if mailcow_watchdog.notify.webhook is defined and
      mailcow_watchdog.notify.webhook | string | length > 0 %}
# Send notifications to a webhook URL that receives a POST request with the content type "application/json".
# You can use this to send notifications to services like Discord, Slack and others.
WATCHDOG_NOTIFY_WEBHOOK={{ mailcow_watchdog.notify.webhook }}
{% else %}
#WATCHDOG_NOTIFY_WEBHOOK=https://discord.com/api/webhooks/XXXXXXXXXXXXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
{% endif %}
{% if mailcow_watchdog.notify.webhook_body is defined and
      mailcow_watchdog.notify.webhook_body | string | length > 0 %}
# JSON body included in the webhook POST request. Needs to be in single quotes.
# Following variables are available: SUBJECT, BODY
WATCHDOG_NOTIFY_WEBHOOK_BODY='{{ mailcow_watchdog.notify.webhook_body }}'
{% else %}
#WATCHDOG_NOTIFY_WEBHOOK_BODY='{"username": "mailcow Watchdog", "content": "****\n"}'
{% endif %}
# Notify about banned IP (includes whois lookup)
WATCHDOG_NOTIFY_BAN={{ mailcow_watchdog.notify.ban | default('true') | bodsch.core.config_bool(true_as='y', false_as='n') }}
# Send a notification when the watchdog is started.
WATCHDOG_NOTIFY_START={{ mailcow_watchdog.notify.start | default('false') | bodsch.core.config_bool(true_as='y', false_as='n') }}
{% if mailcow_watchdog.subject is defined and
      mailcow_watchdog.subject | string | length > 0 %}
# Subject for watchdog mails. Defaults to "Watchdog ALERT" followed by the error message.
WATCHDOG_SUBJECT={{ mailcow_watchdog.subject }}
{% else %}
#WATCHDOG_SUBJECT=
{% endif %}
# Checks if mailcow is an open relay. Requires a SAL. More checks will follow.
# https://www.servercow.de/mailcow?lang=en
# https://www.servercow.de/mailcow?lang=de
# No data is collected. Opt-in and anonymous.
# Will only work with unmodified mailcow setups.
WATCHDOG_EXTERNAL_CHECKS={{ mailcow_watchdog.external_checks | default('false') | bodsch.core.config_bool(true_as='y', false_as='n') }}
# Enable watchdog verbose logging
WATCHDOG_VERBOSE={{ mailcow_watchdog.verbose | default('false') | bodsch.core.config_bool(true_as='y', false_as='n') }}

# Max log lines per service to keep in Redis logs
LOG_LINES={{ mailcow_config.log_lines | default('99') }}

# Internal IPv4 /24 subnet, format n.n.n (expands to n.n.n.0/24)
# Use private IPv4 addresses only, see https://en.wikipedia.org/wiki/Private_network#Private_IPv4_addresses
IPV4_NETWORK={{ mailcow_network.ipv4 }}

# Internal IPv6 subnet in fc00::/7
# Use private IPv6 addresses only, see https://en.wikipedia.org/wiki/Private_network#Private_IPv6_addresses
IPV6_NETWORK={{ mailcow_network.ipv6 }}

{% if mailcow_snat.ipv4.to_source | default('') | string | length > 0 %}
# Use this IPv4 for outgoing connections (SNAT)
SNAT_TO_SOURCE={{ mailcow_snat.ipv4.to_source }}
{% else %}
#SNAT_TO_SOURCE=
{% endif %}
{% if mailcow_snat.ipv6.to_source | default('') | string | length > 0 %}
# Use this IPv6 for outgoing connections (SNAT)
SNAT6_TO_SOURCE={{ mailcow_snat.ipv6.to_source }}
{% else %}
#SNAT6_TO_SOURCE=
{% endif %}

# Create or override an API key for the web UI
# You _must_ define API_ALLOW_FROM, which is a comma separated list of IPs
# An API key defined as API_KEY has read-write access
# An API key defined as API_KEY_READ_ONLY has read-only access
# Allowed chars for API_KEY and API_KEY_READ_ONLY: a-z, A-Z, 0-9, -
# You can define API_KEY and/or API_KEY_READ_ONLY
API_KEY={{ mailcow_api.key }}
API_KEY_READ_ONLY={{ mailcow_api.read_only | default([]) | join(',') }}
API_ALLOW_FROM={{ mailcow_api.allow_from | default([]) | join(',') }}

# mail_home is ~/Maildir
MAILDIR_SUB={{ mailcow_maildir.home }}

# SOGo session timeout in minutes
SOGO_EXPIRE_SESSION={{ mailcow_sogo.expire_session }}

# DOVECOT_MASTER_USER and DOVECOT_MASTER_PASS must both be provided. No special chars.
# Empty by default to auto-generate master user and password on start.
# User expands to DOVECOT_MASTER_USER@mailcow.local
# LEAVE EMPTY IF UNSURE
DOVECOT_MASTER_USER={{ mailcow_dovecot.master_user }}
# LEAVE EMPTY IF UNSURE
DOVECOT_MASTER_PASS={{ mailcow_dovecot.master_pass }}

# Let's Encrypt registration contact information
# Optional: Leave empty for none
# This value is only used on first order!
# Setting it at a later point will require the following steps:
# https://docs.mailcow.email/troubleshooting/debug-reset_tls/
ACME_CONTACT={{ mailcow_acme.contact }}

# WebAuthn device manufacturer verification
# After setting WEBAUTHN_ONLY_TRUSTED_VENDORS=y only devices from trusted manufacturers are allowed
# root certificates can be placed for validation under mailcow-dockerized/data/web/inc/lib/WebAuthn/rootCertificates
WEBAUTHN_ONLY_TRUSTED_VENDORS=n

# Spamhaus Data Query Service Key
# Optional: Leave empty for none
# Enter your key here if you are using a blocked ASN (OVH, AWS, Cloudflare e.g) for the unregistered Spamhaus Blocklist.
# If empty, it will completely disable Spamhaus blocklists if it detects that you are running on a server using a blocked AS.
# Otherwise it will work normally.
SPAMHAUS_DQS_KEY={{ mailcow_spamhaus.dqs_key }}

# Prevent netfilter from setting an iptables/nftables rule to isolate the mailcow docker network - y/n
# CAUTION: Disabling this may expose container ports to other neighbors on the same subnet, even if the ports are bound to localhost
DISABLE_NETFILTER_ISOLATION_RULE=n

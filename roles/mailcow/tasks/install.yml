---

- name: detect cloned mailcow repository - {{ mailcow_tmp_directory }}/update.sh
  ansible.builtin.stat:
    path: "{{ mailcow_tmp_directory }}/update.sh"
  no_log: true
  register: stat_mailcow_repository

- name: obtain git information from download path ({{ mailcow_tmp_directory }})
  become: true
  bodsch.scm.git_info:
    work_dir: "{{ mailcow_tmp_directory }}"
  register: mailcow_repository_information
  when:
    - stat_mailcow_repository.stat.exists | default('false')

- name: define fact variables
  ansible.builtin.set_fact:
    mailcow_repository_version: "{{ mailcow_repository_information.git.version | default('master') }}"

- name: repository version
  ansible.builtin.debug:
    msg: "{{ mailcow_repository_version }}"

- name: reload vars
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      paths:
        - "vars"
      files:
        - main.yml
        # eg. debian-10 / ubuntu-20 / centos-8 / oraclelinux-8
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
        # eg. archlinux-systemd / archlinux-openrc
        - "{{ ansible_distribution | lower }}-{{ ansible_service_mgr | lower }}.yml"
        # eg. debian / ubuntu / centos / oraclelinux
        - "{{ ansible_distribution | lower }}.yml"
        # eg. redhat / debian
        - "{{ ansible_os_family | lower }}.yml"
        # artixlinux
        - "{{ ansible_os_family | lower | replace(' ', '') }}.yml"
        # artixlinux-openrc
        - "{{ ansible_distribution | lower | replace(' ', '') }}-{{ ansible_service_mgr | lower }}.yml"
        - default.yml
      skip: true

- name: detect installed mailcow updater
  ansible.builtin.stat:
    path: "{{ mailcow_install_path }}/{{ mailcow_repository_version }}/update.sh"
  no_log: true
  register: stat_mailcow_installed

- name: detect activated mailcow binary
  ansible.builtin.stat:
    path: "{{ mailcow_install_path }}/active/update.sh"
  no_log: true
  register: stat_mailcow_activated

- name: obtain git information from install path ({{ mailcow_install_path }}/active)
  become: true
  bodsch.scm.git_info:
    work_dir: "{{ mailcow_install_path }}/active"
  register: mailcow_installed_information
  when:
    - stat_mailcow_installed.stat is defined
    - stat_mailcow_installed.stat.exists | default('false')

- name: d
  debug:
    msg:
      - "{{ mailcow_repository_information }}"
      - "{{ mailcow_installed_information }}"

- name: define fact variables
  ansible.builtin.set_fact:
    _mailcow_repo_cloned: "{{ stat_mailcow_repository.stat.exists | default('false') }}"
    _mailcow_installed: "{{ stat_mailcow_installed.stat.exists | default('false') }}"
    _mailcow_activated: "{{ stat_mailcow_activated.stat.exists | default('false') }}"
    #_mailcow_new_version: "{{ not mailcow_repository_information.git.commit_short_id | default('left') ==
    #    mailcow_installed_information.git.commit_short_id | default('right') }}"
    _mailcow_new_version: "{{ mailcow_repository_information | bodsch.email.mailcow_compare_version(mailcow_installed_information) }}"
    _mailcow_information: "{{ mailcow_installed_information.git | default({}) }}"

- name: install mailcow
  when:
    - not running_in_check_mode
    - _mailcow_repo_cloned
    - _mailcow_new_version
  become: true
  block:
    - name: create mailcow directory
      ansible.builtin.file:
        path: "{{ mailcow_install_path }}/{{ mailcow_repository_version }}"
        state: directory
        mode: "0750"

    - name: install mailcow from git repository
      ansible.builtin.copy:
        src: "{{ mailcow_tmp_directory }}/"
        dest: "{{ mailcow_install_path }}/{{ mailcow_repository_version }}/"
        mode: "0640"
        remote_src: true

    - name: create data/web/inc directory
      ansible.builtin.file:
        path: "{{ mailcow_install_path }}/{{ mailcow_repository_version }}/data/web/inc"
        state: directory
        mode: "0750"

    - name: obtain git information for installed mailcow
      bodsch.scm.git_info:
        work_dir: "{{ mailcow_install_path }}/{{ mailcow_repository_version }}"
      register: mailcow_information

    - name: define fact variable
      ansible.builtin.set_fact:
        _mailcow_information: "{{ mailcow_information.git | default({}) }}"

    - name: create app_info.inc.php
      ansible.builtin.template:
        force: true
        src: data/web/inc/app_info.inc.php.j2
        dest: "{{ mailcow_install_path }}/{{ mailcow_repository_version }}/data/web/inc/app_info.inc.php"
        owner: root
        group: root
        mode: "0640"

    - name: create custom fact file
      bodsch.core.facts:
        name: mailcow
        facts:
          version: "{{ _mailcow_information.version }}"
          commit: "{{ _mailcow_information.commit_short_id }}"
          commit_date: "{{ _mailcow_information.commit_date }}"

  rescue:
    - name: delete install directory
      ansible.builtin.file:
        path: "{{ mailcow_install_path }}/{{ mailcow_repository_version }}"
        state: absent

    - name: exit with fail
      ansible.builtin.fail:
        msg: A serious error occurred during the installation of the binary.

- name: activate version {{ mailcow_repository_version }}
  when:
    - not running_in_check_mode
    - not _mailcow_activated
  block:
    - name: create link from {{ mailcow_repository_version }} to active
      ansible.builtin.file:
        src: "{{ mailcow_install_path }}/{{ mailcow_repository_version }}"
        dest: "{{ mailcow_install_path }}/active"
        state: link
        force: true
        follow: false
      notify:
        - restart mailcow

  rescue:
    - name: delete install directory
      ansible.builtin.file:
        path: "{{ mailcow_install_path }}/{{ mailcow_repository_version }}"
        state: absent

    - name: delete mailcow facts
      ansible.builtin.file:
        path: /etc/ansible/facts.d/mailcow.fact
        state: absent

    - name: exit with fail
      ansible.builtin.fail:
        msg: A serious error occurred during the installation of the binary.

- name: merge mailcow configuration between defaults and custom
  ansible.builtin.set_fact:
    mailcow_config: "{{ mailcow_default_config | combine(mailcow_config, recursive=True) }}"

- name: re-define mailcow_version
  ansible.builtin.set_fact:
    mailcow_version: "{{ mailcow_repository_version }}"

- name: create docker-compose.d directory
  ansible.builtin.file:
    path: "{{ mailcow_install_path }}/active/docker-compose.d"
    state: directory
    mode: "0750"

- name: copy custom update script
  ansible.builtin.copy:
    src: mailcow-update.py
    dest: "{{ mailcow_install_path }}/active/"
    mode: "0750"

- name: systemd
  when:
    - ansible_service_mgr | lower == "systemd"
    - not running_in_check_mode
  block:
    - name: create mailcow run configuration
      ansible.builtin.template:
        src: "init/mailcow.j2"
        dest: "{{ mailcow_defaults_directory }}/mailcow"
        force: true
        owner: root
        group: root
        mode: "0640"
      notify:
        - restart mailcow

    - name: create systemd service unit
      ansible.builtin.template:
        src: "init/systemd/mailcow.service.j2"
        dest: "{{ systemd_lib_directory }}/mailcow.service"
        owner: root
        group: root
        mode: "0644"
      notify:
        - daemon-reload

    - name: create systemd service unit mailcow-config.service
      ansible.builtin.template:
        src: "init/systemd/mailcow-config.service.j2"
        dest: "{{ systemd_lib_directory }}/mailcow-config.service"
        owner: root
        group: root
        mode: "0644"
      notify:
        - daemon-reload

    - name: create systemd service unit mailcow-pull.service
      ansible.builtin.template:
        src: "init/systemd/mailcow-pull.service.j2"
        dest: "{{ systemd_lib_directory }}/mailcow-pull.service"
        owner: root
        group: root
        mode: "0644"
      notify:
        - daemon-reload

...
